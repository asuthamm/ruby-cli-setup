class MyYelp
attr_reader

require "tty-prompt"
prompt = TTY::Prompt.new

    def run
        welcome
        
    end

    private

    def welcome                           #--------------------
        system "clear"
        prompt = TTY::Prompt.new
        puts "- - -  Welcome to myYelp  - - - "
        puts ""
        puts "Please enter your user_id or '?' to search for your account"
        puts "or just hit enter to create new account"

        opt = gets.chomp
        case opt
        when ""
            new_user
        when "?"
            search_user
        else
            @search_id = opt
            return_user
        end

    end

    def new_user                    # ---------------
        system "clear"
        puts 'What is your first name?'
        fname = gets.chomp

        puts 'What is your last name?'
        lname = gets.chomp

        puts "What is your zip code?"
        zip = gets.chomp
        
        accept_policy_and_term
        system "clear"
        puts "Welcome, #{fname} #{lname} from zip code #{zip}"
        Customer.create(first_name: fname,last_name: lname, zip_code: zip)
        puts "You are customer#: #{Customer.all.last.id}"
        @user = Customer.find(Customer.all.last.id)
        puts "..."
        opt = gets.chomp
        task_list
    end

    def return_user              # ----------------
        system "clear"
        @user = Customer.find(@search_id)
        task_list
    end

    def search_user                 # -------------------
        system "clear"
        puts 'What is your first name?'
        fname = gets.chomp

        puts 'What is your last name?'
        lname = gets.chomp
        # binding.pry
        @user = Customer.all.find { |cust| cust.first_name == fname && cust.last_name == lname } 
        if !!@user == false
            not_found
            welcome
        end
        puts "User found# #{@user.id}"
        puts "Welcome back, #{@user.first_name} #{@user.last_name} from zip code #{@user.zip_code}"
        puts "..."
        opt = gets.chomp
        task_list
    end

    def task_list
        system "clear"
        puts "Welcome back, #{@user.first_name} #{@user.last_name} from zip code #{@user.zip_code}"
        puts "User# #{@user.id}"
        puts ""
        puts "1.  All the restaurants in my zip code profile"
        puts "2.  All the reviews I posted"
        puts "3.  Create new review"
        puts "4.  Update my previous review"
        puts "5.  Delete my previous review"
        puts "6.  Change my location"
        puts "9.  Exit"
        puts ""
        puts "Please enter your option below:"
        opt = gets.chomp
        # binding.pry
        case opt
        when "1"                      # list by zip
            list_restaurants
            task_list
        when "2"                      # list my restaurants
            my_reviews
            task_list
        when "3"                      # create new review
            create_review
            task_list
        when "4"                      # chg my review
            chg_rating
            view_my_review
            task_list
        when "5"                      # delete my review       
            review_delete
            task_list
        when "6"                      # delete my review       
            new_location
            task_list
        when "9"                      # bye
            p 'Bye for now.'
            system "exit"
        when "c"                      # console
            binding.pry
            task_list
        else
            task_list
        end
        
    end

    def list_restaurants                    # option 1
        system "clear"
        puts "Welcome back, #{@user.first_name} #{@user.last_name} from zip code #{@user.zip_code}"
        puts "User# #{@user.id}"
        puts ""
        p "======================================================"
        p "==             Restaurant in my area:               ==" 
        p "==             Rating    <--     Name               =="
        p "======================================================"
        # Restaurant.all.each.map  { |rest| p rest.name if rest.zip_code == @user.zip_code }

        arr = Restaurant.all.select  { |rest| rest.zip_code == @user.zip_code }
        arr.each  { |rt| p "                #{rt.avg_rating}       -      #{rt.name}" }
        puts "..."
        opt = gets.chomp
    end

    def my_reviews                       # option 2
        # binding.pry
        system "clear"
        puts "Welcome back, #{@user.first_name} #{@user.last_name} from zip code #{@user.zip_code}"
        puts "User# #{@user.id}"
        puts ""
        puts "Here are the list of my restaurants I had visited in the past:"
        p "======================================================"
        p "==          All of my restaurant reviews            ==" 
        p "==             Rating    <--     Name               =="
        p "======================================================"
        @user.reviews.reload.each do |review|
            p "                 #{review.rating}        -      #{review.restaurant.id}-#{review.restaurant.name}"
         end 
        puts "..."
        opt = gets.chomp
    end

    def create_review                  # option 3
        system "clear"
        prompt = TTY::Prompt.new
        puts "Welcome back, #{@user.first_name} #{@user.last_name} from zip code #{@user.zip_code}"
        puts "User# #{@user.id}"
        puts ""

        restaurant_arr = Restaurant.all.map { |rt| rt.name }
        sch_rest = prompt.select("Choose your restaurant?", restaurant_arr)

        t_rating = prompt.ask('Please enter the rating (1-5):  ')
        t_comnt  = prompt.ask('Please enter the comment     :  ')
 
        if (1..5).include?(t_rating.to_i) == false
            # binding.pry
            task_list
        end
        # binding.pry
        rt_id = Restaurant.all.find { |rt| rt.name == sch_rest}.id
        Review.create(rating: t_rating, comment: t_comnt, customer_id: @user.id, restaurant_id: rt_id)
        # view_my_review
    end

    def search_review           # ref by (4)chg_rating & review_delete
        system "clear"
        prompt = TTY::Prompt.new
        puts "Welcome back, #{@user.first_name} #{@user.last_name} from zip code #{@user.zip_code}"
        puts "User# #{@user.id}"
        puts ""

        restaurant_arr = @user.restaurants.reload.map { |rt| rt.name }
        sch_rest = prompt.select("Choose your restaurant?", restaurant_arr)


        @my_review = @user.reviews.reload.find { |review| review.restaurant.name == sch_rest}

        
        p "Your current review for #{@my_review.restaurant.name}"
        p "================================================================================="
        p "#{@my_review.rating}    -     #{@my_review.comment}"
        p "================================================================================="
        p ""
    end

    def chg_rating                        # option 4
        search_review
        prompt = TTY::Prompt.new
        puts "Welcome back, #{@user.first_name} #{@user.last_name} from zip code #{@user.zip_code}"
        puts "User# #{@user.id}"
        puts ""

        new_rating = prompt.ask('Please enter the new rating (1-5):  ')
        new_comnt  = prompt.ask('Please enter the new comment     :  ')
 
        if (1..5).include?(new_rating.to_i) == false
            # binding.pry
            task_list
        end

        @my_review.update(rating: new_rating, comment: new_comnt)

    end

    def view_my_review                  # option 4b
        system "clear"
        puts "Welcome back, #{@user.first_name} #{@user.last_name} from zip code #{@user.zip_code}"
        puts "User# #{@user.id}"
        puts ""
        p "Your reviews for #{@my_review.restaurant.name}"
        # p "Your reviews for #{@my_review.restaurant.name}"
        p "===================================================="
        p "#{@my_review.rating}    -     #{@my_review.comment}"
        opt = gets.chomp
    end
    


    def review_delete
        search_review
        p ""
        p ""
        puts "==================================================="
        puts "==  Caution! You're about to delete your review  =="
        puts "==================================================="
        opt = gets.chomp.downcase
        # binding.pry
        case opt 
        when "delete"
            # binding.pry
            @my_review.destroy
        else
            puts "Abort!!"
            opt = gets.chomp
        end
        # opt = gets.chomp
    end

    def new_location
        system "clear"
        prompt = TTY::Prompt.new
        new_loc = prompt.ask('What is your new zip code?')
        @user.zip_code = new_loc
    end

    def not_found
        system "clear"
        puts "=================================================="
        puts "========      Sorry! No record found      ========"
        puts "=================================================="
        puts "..."
        opt = gets.chomp
    end

    def accept_policy_and_term
        system "clear"
        prompt = TTY::Prompt.new
        File.open("terms.txt").each { |line| puts line }
        puts ""
        ans = prompt.yes?('Do you accept myYelp Terms of Service?')
        if ans == false
            system "exit"
        end

        File.open("privacy.txt").each { |line| puts line }
        puts ""
        ans = prompt.yes?('Do you accept myYelp Privacy Policy?')
        if ans == false
            system "exit"
        end

    end

end

